crate.dir('Aula01')
create.dir('Aula01')
create.dir('Aula01/Dados')
?create.dir
??create.dir
dir.create('Aula01')
dir.create('Aula01/Dados')
df_titanic <- read.csv('../Aula01/Dados/titanic.csv', header = TRUE)
df_titanic <- read.csv('./Aula01/Dados/titanic.csv', header = TRUE)
View(df_titanic)
# Pacotes a serem usados
library(tidyverse)
# Importa o arquivo csv para o objeto df_titanic
df_titanic <- read_csv("dados/titanic.csv")
# Seleciona os sobreviventes.
df_titanic %>% filter(sobreviveu == "sim")
# Pacotes a serem usados
library(tidyverse)
# Importa o arquivo csv para o objeto df_titanic
df_titanic <- read_csv("dados/titanic.csv")
# Pacotes a serem usados
library(tidyverse)
df_titanic <- read_csv('./Aula01/Dados/titanic.csv', header = TRUE)
View(df_titanic)
df_titanic <- read_csv('./Aula01/Dados/titanic.csv', col_names = TRUE)
View(df_titanic)
df_titanic
# Importa o arquivo csv para o objeto df_titanic
df_titanic <- read_csv("Dados/titanic.csv")
# Importa o arquivo csv para o objeto df_titanic
df_titanic <- read_csv("./Dados/titanic.csv")
# Importa o arquivo csv para o objeto df_titanic
df_titanic <- read_csv("../Dados/titanic.csv")
# Seleciona os sobreviventes.
df_titanic %>% filter(sobreviveu == "sim")
dir.create('Aula02')
?Cars93
??Cars93
library(tidyverse)
require(tidyverse)
require(tidyverse)
?datasets
library(tidyverse)
library(MASS)
df <- Cars93 %>%
select(Horsepower, Type, AirBags)
df <- MASS::Cars93 %>%
select(Horsepower, Type, AirBags)
df <- MASS::Cars93 %>%
dplyr::select(Horsepower, Type, AirBags)
glimpse(df)
ggplot(df, aes(x = Horsepower)) +
geom_histogram(bins = 10,
color = "black",
fill = "darkorchid4") +
theme_bw() +
labs(x = "Frequencia",
y = "Horsepower",
title = "Potencia")
identify(x = 1)
identify(n = 1)
x <- ggplot(df, aes(x = Horsepower)) +
geom_histogram(bins = 10,
color = "black",
fill = "darkorchid4") +
theme_bw() +
labs(x = "Frequencia",
y = "Horsepower",
title = "Potencia")
identify(x, n = 1)
?identify
dir.create('Aula03')
install.packages('gapminder')
library(gapminder)
gapminder
library(tidyverse)
library(GGally)
library(tidyverse)
library(corrplot)
diamons
diamonds
class(diamons)
class(diamonds)
str(diamonds)
diamons %>% select(is.numeric())
diamons %>% select(is.numeric)
diamons %>% select_if(is.numeric())
diamons %>% select_if(is.numeric)
diamonds %>% select_if(is.numeric)
?count
library(tidyverse)
library(treemapify)
library(GGally)
library(viridis)
library(corrplot)
library(gapminder)
library(patchwork)
### Gráfico de bolhas ###
data(gapminder)
glimpse(gapminder)
df <- mtcars
p <- ggplot(df)
a <- p +
aes(mpg, disp, col = as.factor(vs)) +
geom_smooth(se = F) +
geom_point()
b <- p +
aes(disp, gear, group = gear) +
geom_boxplot()
c <- p +
aes(hp) +
stat_density(geom = "area") +
coord_cartesian(expand = 0)
# adiciona ggplots adicionando-os com +
a + b + c
# | especifica adição lado a lado
a | c
# / é para adicionar gráficos sob o gráfico anterior
b / c
# usando parênteses para agrupar gráficos e +, | e / para adicionar os grupos
(a | b) / c
# usando parênteses para agrupar gráficos e +, | e / para adicionar os grupos
(a | b) / c +
plot_annotation(tag_levels = "A") &
theme(legend.position = "none")
#dados
balance <- data.frame(event =
c("Starting\nCash", "Sales", "Refunds",
"Payouts", "Court\nLosses", "Court\nWins", "Contracts", "End\nCash"),
change = c(2000, 3400, -1100, -100, -6600, 3800, 1400, 2800))
# o saldo depois de cada movimentacão financeira, usado para traçar o ponto de partida da barra
balance$balance <- cumsum(c(0, balance$change[-nrow(balance)]))
# o tempo em que cada movimentacao financeira foi feita, para mantermos a ordem delas
balance$time <- 1:nrow(balance)
# a direcao do fluxo financeiro: aumento ou diminuicao
balance$flow <- factor(sign(balance$change))
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
balance <- data.frame(event =
c("Starting\nCash", "Sales", "Refunds",
"Payouts", "Court\nLosses", "Court\nWins", "Contracts", "End\nCash"),
change = c(2000, 3400, -1100, -100, -6600, 3800, 1400, 2800))
waterfall(balance)
install.packages("waterfall")
library(waterfall)
waterfall(balance)
waterfall::waterfall(balance)
?waterfall
waterfallchart(balance)
waterfallplot(balance)
waterfall(balance$change)
install.packages("waterfalls")
library(waterfalls)
waterfall(balance)
waterfall(balance, calc_total = true)
waterfall(balance, calc_total = TRUE)
?waterfalls::waterfall
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
ggplot(balance) +
geom_rect(aes(xmin = time -0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
# o tempo em que cada movimentacao financeira foi feita, para mantermos a ordem delas
balance$time <- 1:nrow(balance)
# a direcao do fluxo financeiro: aumento ou diminuicao
balance$flow <- factor(sign(balance$change))
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
# o saldo depois de cada movimentacão financeira, usado para traçar o ponto de partida da barra
balance$balance <- cumsum(c(0, balance$change[-nrow(balance)]))
# o tempo em que cada movimentacao financeira foi feita, para mantermos a ordem delas
balance$time <- 1:nrow(balance)
# a direcao do fluxo financeiro: aumento ou diminuicao
balance$flow <- factor(sign(balance$change))
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
#dados
balance <- data.frame(event =
c("Starting\nCash", "Sales", "Refunds",
"Payouts", "Court\nLosses", "Court\nWins", "Contracts", "End\nCash"),
change = c(2000, 3400, -1100, -100, -6600, 3800, 1400, 2800))
# o saldo depois de cada movimentacão financeira, usado para traçar o ponto de partida da barra
balance$balance <- cumsum(c(0, balance$change[-nrow(balance)]))
# o tempo em que cada movimentacao financeira foi feita, para mantermos a ordem delas
balance$time <- 1:nrow(balance)
# a direcao do fluxo financeiro: aumento ou diminuicao
balance$flow <- factor(sign(balance$change))
ggplot(balance) +
geom_rect(aes(xmin = time - 0.45, xmax = time + 0.45,
ymin = balance, ymax = balance + change, fill = flow)) +
geom_text(aes(x = time, y = pmin(balance, balance + change) - 50, label = paste0("$",change))) +
scale_y_continuous("Balance", labels=scales::dollar_format()) +
theme(legend.position = "none")
waterfall(salao, calc_total = TRUE) +
labs(title = "Fluxo de caixa",
subtitle = "Fevereiro de 2022",
x = "Descrição",
y = "Balanço") +
theme_minimal()
waterfall(balance, calc_total = TRUE) +
labs(title = "Fluxo de caixa",
subtitle = "Fevereiro de 2022",
x = "Descrição",
y = "Balanço") +
theme_minimal()
df <- mtcars
p <- ggplot(df)
a <- p +
aes(mpg, disp, col = as.factor(vs)) +
geom_smooth(se = F) +
geom_point()
b <- p +
aes(disp, gear, group = gear) +
geom_boxplot()
c <- p +
aes(hp) +
stat_density(geom = "area") +
coord_cartesian(expand = 0)
# adiciona ggplots adicionando-os com +
a + b + c
# | especifica adição lado a lado
a | c
# / é para adicionar gráficos sob o gráfico anterior
b / c
# usando parênteses para agrupar gráficos e +, | e / para adicionar os grupos
(a | b) / c
library(tidyverse)
library(patchwork)
waterfall(salao, calc_total = TRUE) +
labs(title = "Fluxo de caixa",
subtitle = "Fevereiro de 2022",
x = "Descrição",
y = "Balanço") +
theme_minimal()
library(tidyverse)
library(waterfalls)
salao <- data.frame(
months =
c(
"Saldo\nAtual",
"Cortes",
"Escovas",
"Coloracao",
"Contas",
"Manicure",
"Fornecedores",
"Aluguel"
),
amount = c(1000, 500, 400, 800, 400, 500,-350,-1000)
)
waterfall(salao, calc_total = TRUE) +
labs(title = "Fluxo de caixa",
subtitle = "Fevereiro de 2022",
x = "Descrição",
y = "Balanço") +
theme_minimal()
library(tidyverse)
library(patchwork)
library(tidyverse)
library(patchwork)
p1 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p1
p2 <- ggplot(mtcars) + geom_point(aes(mgp, disp))
p2
p2 <- ggplot(mtcars) + geom_point(aes(x = mgp, y = disp))
p2
?geom_point
p2 <- ggplot(mtcars) + geom_point(mtcars, aes(x = mgp, y = disp))
p2
p2 <- ggplot(mtcars, aes(x = mgp, y = disp)) + geom_point()
p2
mtcars
glimpse(mtcars)
p2 <- ggplot(mtcars, aes(x = mpg, y = disp)) + geom_point()
p2
?patchwork
